%% Define network 
% The part you have to modify
net.layers = {} ;



%Conv1
	%(input = 32x32x3, Ouput = 29x29x64)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(4,4,3,64, 'single'), ...
		  'biases', zeros(1, 64, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%CCCP1a
	%(input = 29x29x64, Ouput = 29x29x42)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(1,1,64,42, 'single'), ...
		  'biases', zeros(1, 42, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%RELU1a
	%(input = 29x29x42, Ouput = 29x29x42)
		net.layers{end+1} = struct('type', 'relu') ;
%CCCP1b
	%(input = 29x29x42, Ouput = 29x29x32)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(1,1,42,32, 'single'), ...
		  'biases', zeros(1, 32, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%Pool1
	%(input = 29x29x32, Ouput = 14x14x32)
		net.layers{end+1} = struct('type', 'pool', ...
		   'method', 'max', ...
		   'pool', [3 3], ...
		   'stride', 2, ...
		   'pad', [0 0 0 0]) ;
%Dropout1
	%(input = 14x14x32, Ouput = 14x14x32)
		net.layers{end+1} = struct('type', 'dropout','rate',0.5) ;
%RELU1b
	%(input = 14x14x32, Ouput = 14x14x32)
		net.layers{end+1} = struct('type', 'relu') ;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
%Conv2
	%(input = 14x14x32, Ouput = 11x11x42)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(4,4,32,42, 'single'), ...
		  'biases', zeros(1, 42, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%Pool2
	%(input = 11x11x42, Ouput = 5x5x42)
		net.layers{end+1} = struct('type', 'pool', ...
		   'method', 'max', ...
		   'pool', [3 3], ...
		   'stride', 2, ...
		   'pad', [0 0 0 0]) ;
%Dropout2
	%(input = 5x5x42, Ouput = 5x5x42)
		net.layers{end+1} = struct('type', 'dropout','rate',0.5) ;
%RELU2
	%(input = 5x5x42, Ouput = 5x5x42)
		net.layers{end+1} = struct('type', 'relu') ;

		
%Conv3
	%(input = 5x5x42, Ouput = 4x4x64)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(2,2,42,64, 'single'), ...
		  'biases', zeros(1, 64, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%Pool3
	%(input = 4x4x64, Ouput = 2x2x64)
		net.layers{end+1} = struct('type', 'pool', ...
		   'method', 'max', ...
		   'pool', [2 2], ...
		   'stride', 2, ...
		   'pad', [0 0 0 0]) ;
%RELU3
	%(input = 2x2x64, Ouput = 2x2x64)
		net.layers{end+1} = struct('type', 'relu') ;

		
		
%FullyConnected1
	%(input = 2x2x64, Ouput = 1x1x768)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(2,2,64,768, 'single'), ...
		  'biases', zeros(1, 768, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%Sigmoid
	%(input = 1x1x768, Ouput = 1x1x768)
		net.layers{end+1} = struct('type', 'sigmoid') ;
%FullyConnected
	%(input = 1x1x768, Ouput = 1x1x100)
		net.layers{end+1} = struct('type', 'conv', ...
		  'filters', 1e-4*randn(1,1,768,100, 'single'), ...
		  'biases', zeros(1, 100, 'single'), ...
		  'filtersLearningRate', 1, ...
		  'biasesLearningRate', 2, ...
		  'stride', 1, ...
		  'pad', 0) ;
%Softmax
		net.layers{end+1} = struct('type', 'softmaxloss') ;